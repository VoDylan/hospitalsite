
generator client {
  provider   = "prisma-client-js"
  output     = "../.prisma/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Node {
  nodeID         String           @id
  xcoord         Int
  ycoord         Int
  floor          String
  building       String
  nodeType       String
  longName       String
  shortName      String
  startEdges     Edge[]           @relation("StartNode")
  endEdges       Edge[]           @relation("EndNode")
  Patient        Patient[]
  ServiceRequest ServiceRequest[]
}

model Edge {
  edgeID      String @id
  startNodeID String
  endNodeID   String
  startNode   Node   @relation(fields: [startNodeID], references: [nodeID], name: "StartNode", onDelete: Cascade, onUpdate: Cascade)
  endNode     Node   @relation(fields: [endNodeID], references: [nodeID], name: "EndNode", onDelete: Cascade, onUpdate: Cascade)
}

model User {
  userID        Int             @id @default(autoincrement())
  userName      String          @unique
  emailAddress  String
  password      String
  Admin         Admin[]
  Patient       Patient[]
  MedicalWorker MedicalWorker[]
  // ServiceRequest ServiceRequest[]
}

model Employee {
  employeeID Int  @id @default(autoincrement())
  firstName  String
  lastName   String
}

model Admin {
  adminID Int  @id @default(autoincrement())
  User    User @relation(fields: [userID], references: [userID])
  userID  Int
}

model Patient {
  patientID          Int                  @id @default(autoincrement())
  Room               Node                 @relation(fields: [roomID], references: [nodeID])
  roomID             String
  User               User                 @relation(fields: [userID], references: [userID])
  userID             Int
  MedicalAssignments MedicalAssignments[]
}

model MedicalWorker {
  medicalID          Int                  @id @default(autoincrement())
  title              String
  User               User                 @relation(fields: [userID], references: [userID])
  userID             Int
  MedicalAssignments MedicalAssignments[]
}

model MedicalAssignments {
  assignmentID  Int           @id @default(autoincrement())
  MedicalWorker MedicalWorker @relation(fields: [medicalID], references: [medicalID])
  medicalID     Int
  Patient       Patient       @relation(fields: [patientID], references: [patientID])
  patientID     Int

  @@unique([medicalID, patientID])
}

model ServiceRequest {
  id          Int    @id @default(autoincrement())
  employeeID  String
  node        Node   @relation(fields: [nodeID], references: [nodeID])
  nodeID      String
  serviceType String
  services    String
  status      String @default("Unassigned")
}

model FlowerServiceRequest {
  id            Int    @id @default(autoincrement())
  name          String
  flowerType    String
  recipientName String
  roomNumber    String
  message       String
}

// model GiftDeliveryService {
// id            Int    @id @default(autoincrement())
// name          string
// recipientName string
// status        string
// location      string
// message       string
// delivery      string
// giftSize      string
// giftAddOn     string
// }
